package vstudionetutil;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedList;

/**
 * XDXD
 * @author rC
 */
public class GenMNT_Procedures extends RCGen {

//    static String path = "E:/TF v2/SCRIPTS/";    
    static HashMap<String, String[]> autogeneratedCode = new HashMap<String, String[]>();
    String spPrefix;
    private HashMap<String, String> convalidaciones = new HashMap<String, String>();
    private String paramPrefix = "p_";

    /**
     * 
     * @param con Database Connection
     * @param tables Array of tables that the procedure will be make for 
     * @param path pathfile
     * @param file filename 
     * @param prefijo prefix of the tables
     */
    public GenMNT_Procedures(Connection conn, String databaseName,
            String[] tables, String prefijoSP,
            String filePath, String fileName, String tablePrefix) {
        super(conn, databaseName, tables, tablePrefix, filePath, fileName);
        this.spPrefix = prefijoSP;
    //        convalidaciones.put("bit(1)", "bit");
    }

    public String makeMntProcedure(boolean drop) throws SQLException, IOException {
        PrintWriter pw = new PrintWriter(new FileWriter(filePath + fileName));
        String spCode = "";
        if (drop) {
            for (String table : tables) {
                spCode += "drop proc " + spPrefix + "insert_" + table + "\n";
                spCode += "drop proc " + spPrefix + "update_" + table + "\n";
                spCode += "drop proc " + spPrefix + "delete_" + table + "\n";
                spCode += "GO\n";
            }
        }
        pw.println("USE " + databaseName + "\nGO\n");
        pw.println(spCode);
        spCode = "";
        for (String table : tables) {
            spCode += "--################### " + table + " procedures ###############\n";
            spCode += genInsertProcedure(table) +
                    genUpdateProcedure(table) +
                    genDeleteProcedure(table);
        }
        pw.println(spCode);
        pw.close();
        System.out.println(spCode);
        return spCode;
    }

    private String genInsertProcedure(String table) throws SQLException {
        String insertCode = "";
        insertCode += "CREATE PROCEDURE " + spPrefix + "insert_" + table + "(\n";
        ArrayList<Node> fields = new Util().getFields(tablePrefix + table, conn);
        for (Node node : fields) {
            if (node.insertable) {
                String fixedType = node.sqlType;
                if (node.precisioNeededInParam) {//si necesita precision
                    fixedType += "(" + node.precision;
                    if (node.ScaleNeededInParam) {
                        fixedType += "," + node.scale;
                    }
                    fixedType += ")";
                }
                insertCode += node.sqlParamProcName + " " + fixedType;
                if (node.isNullable) {
                    insertCode += " = null";
                }
                insertCode += ",\n";
            }
        }

        insertCode = insertCode.substring(0, insertCode.length() - 2);
        insertCode += ")\n";
        insertCode += "as begin\n";
        insertCode += "\tINSERT INTO " + tablePrefix + table + " VALUES(";
        String columns = "";
        for (Node node : fields) {
            if (node.insertable) {
                columns += node.sqlParamProcName + ", ";
            }
        }
        columns = columns.substring(0, columns.length() - 2);
        insertCode += columns;
        insertCode += ")" + "\n";
        insertCode += "end\n" +
                "GO\n\n";
        return insertCode;
    }

    private String genUpdateProcedure(String table) throws SQLException {
        String updateCode = "";
        updateCode += "CREATE PROCEDURE " + spPrefix + "update_" + table + "(\n";
        ArrayList<Node> fields = new Util().getFields(tablePrefix + table, conn);

        for (Node node : fields) {
            String fixedType = node.sqlType;
            if (node.precisioNeededInParam) {//si necesita precision
                fixedType += "(" + node.precision;
                if (node.ScaleNeededInParam) {
                    fixedType += "," + node.scale;
                }
                fixedType += ")";
            }
            updateCode += node.sqlParamProcName + " " + fixedType;
            if (node.isNullable) {
                updateCode += " = null";
            }
            updateCode += ",\n";
        }

        updateCode = updateCode.substring(0, updateCode.length() - 2);
        updateCode += ")\n";
        updateCode += "AS BEGIN\n";
        updateCode += "\tUPDATE " + tablePrefix + table + "\n";
        updateCode += "\tSET \n";
        int n = 0;
        for (Node node : fields) {
            if (!node.isPK) {
                n++;
                updateCode += "\t" + node.sqlName + " = " + node.sqlParamProcName + ",\n";
            }
        }
        if(n==0)
            return "";
        updateCode = updateCode.substring(0, updateCode.length() - 2) + "\n";
        updateCode += "\tWHERE ";
        for (Node node : fields) {
            if (node.isPK) {
                updateCode += node.sqlName + " = " + node.sqlParamProcName + " AND\n\t\t";
            }
        }
        updateCode = updateCode.substring(0, updateCode.length() - 6) + "\n";
        updateCode += "end\n" +
                "GO\n\n";
        return updateCode;
    }

    private String genDeleteProcedure(String table) throws SQLException {
        String deleteCode = "";
        ResultSet rs = conn.createStatement().executeQuery("select * from " + tablePrefix + table + " where 2 = 1");
        LinkedList<String> pks = new Util().getPrimaryKeys(tablePrefix + table, conn);
        deleteCode += "CREATE PROCEDURE " + spPrefix + "delete_" + table + "(\n";
        System.err.println(pks);

        ArrayList<Node> fields = new Util().getFields(tablePrefix + table, conn);
        for (Node node : fields) {
            if (node.isPK) {
                deleteCode += "@" + paramPrefix + node.sqlName + " " + node.sqlType + ", \n";
            }
        }
        deleteCode = deleteCode.substring(0, deleteCode.length() - 3) + ")\n";
        deleteCode += "AS BEGIN \n";
        deleteCode += "\tDELETE " + tablePrefix + table + " \n\tWHERE ";
        for (Node node : fields) {
            if (node.isPK) {
                deleteCode += node.sqlName + " = @" + paramPrefix + node.sqlName + " AND\n\t\t";
            }
        }
        deleteCode = deleteCode.substring(0, deleteCode.length() - 6) + "\n";
        deleteCode += "END\n" +
                "GO\n\n";
        return deleteCode;
    }
    static String[] tantaFactTables = {
        "Presentacion",
        "UnidadMedida",
        "Marca",
        "Modelo",
        "Grupo",
        "Clase",
        "Producto",
        "TipoVehiculo",
        "Proveedor",
        "TipoComprobante",
        "Cliente",
        "Persona",
        "Pais",
        "Departamento",
        "TipoDocIdentidad",
        "Empleado",
        "Cargo",
        "Moneda",
        "FormaPago",
        "TipoMov"
    };

    public static void runMatricula() throws SQLException, IOException, ClassNotFoundException {
        Connection conn = MasterConn.getConnection();
        String[] matriculaTables = {
//            //batista
//            "universidad",
//            "facultad",
//            "escuela",
//            "plan_curricular",
//            //paco
//            "ciclo",
//            "curso",
//            "docente",
//            "carga_lectiva",
//            "prerequisitos",
//            "sede",
//            //rc
//            "tipo_pago",
//            "tipo_sancion",
//            "alumno",
//            "usuario",
            "files_upload"
        };
        String prefijo = "t_";
        String schema = "Matricula";
        String prefijoSP = "stp_";
        GenMNT_Procedures ob = new GenMNT_Procedures(
                conn, "Matricula", matriculaTables, prefijoSP,
                "E:/Matricula/DB/", "maintenance_procedures.sql", prefijo);
        String preSQL = "USE MATRICULA\n GO\n";
        ob.makeMntProcedure(true);
    }

    public static void runProveedor() throws Exception {
        Connection conn = MasterConn.getConnection();
        String[] proveedorTables = {
            "departamento",
            "provincia",
            "distrito",
            "proveedor"
        };
        String prefijo = "t_";
        String procedurePrefix = "spt_";
        GenMNT_Procedures ob = new GenMNT_Procedures(
                conn, "Proveedor", proveedorTables, procedurePrefix,
                "E:/Visual Studio Projects/Proveedor/", "Proveedor_mnt_procedures.sql", prefijo);
        ob.makeMntProcedure(true);
    }

    public static void runAlmacenTienda() throws SQLException, IOException, ClassNotFoundException {
        Connection conn = MasterConn.getConnection();
        String[] almacenTiendaTables = {
            "almacen",
            "inventario",
            "producto",
            "gasto_mensual",
            "transferencia",
            "tienda"
        };
        String prefijo = "t_";
        String procedurePrefix = "spt_mnt_";
        GenMNT_Procedures ob = new GenMNT_Procedures(
                conn, "AlmacenTienda", almacenTiendaTables, procedurePrefix,
                "E:/Visual Studio Projects/Almacen Tienda/", "Almacen_Tienda_mnt_procedures.sql", prefijo);
        ob.makeMntProcedure(true);
    }

    public static void runMaritza() throws SQLException, IOException {
        Connection conn = MasterConn.getConnection("Maritza", "", "");
        String[] tables = {"Pedido_Detalle", "Pedido", "Usuario_Tienda"};
        GenMNT_Procedures gen = new GenMNT_Procedures(conn, "Almacen", tables,
                "stp_", "E:/inteka/BD", "Martiza_MNT_PROCEDURES.sql", "");
        gen.makeMntProcedure(true);
    }

    public static void main(String[] args) throws Exception {
//        runProveedor();
        runMatricula();
//        runMaritza();
    }
}
