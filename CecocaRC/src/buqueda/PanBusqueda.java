package buqueda;

import cecocadb.DB;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import rclib.RCContainer;
import database.RCJTable;

/**
 *
 * @author rCuser
 */
public class PanBusqueda extends javax.swing.JPanel {

    DB database;
    Object[][] data;
    public RCJTable table;
    HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
    String condicion;

    public PanBusqueda(DB database) throws SQLException {
        this.database = database;
        initComponents();
        refreshData();
        LinkedHashMap<String, String[]> columns = new LinkedHashMap<String, String[]>();
        columns.put("p.codi_postulante", new String[]{"Codigo", "3"});
        columns.put("p.ape_paterno", new String[]{"Apellido Paterno", "10"});
        columns.put("p.ape_materno", new String[]{"Apellido Materno", "10"});
        columns.put("p.nombres", new String[]{"Nombres", "10"});
        columns.put("ub.numero_aula", new String[]{"Aula", "3"});
        columns.put("es.nombre", new String[]{"Escuela", "30"});
        columns.put("p.puntaje", new String[]{"Puntaje", "3"});
        columns.put("p.condicion", new String[]{"Condici√≥n", "3"});
        columns.put("p.puesto", new String[]{"Puesto", "3"});
        columns.put("p.prom_colegio", new String[]{"Prom. Colegio", "3"});
        String condition = "WHERE p.id_ubicacion=ub.id_ubicacion "+
                "AND p.id_escuela = es.id_escuela ";
        table = new RCJTable(database.getConn(), "postulante p, ubicacion ub, escuela es", columns, condition);

        jScrollPane1.setViewportView(table);
    }

    public void refreshData() throws SQLException {
        ResultSet rs = database.crSt().executeQuery(
                "select id_concurso, concat(proceso.designacion,' ', modalidad.nombre,' ', sede.nominacion) "+
                "FROM concurso, modalidad, sede, proceso "+
                "WHERE concurso.id_modalidad = modalidad.id_modalidad "+
                "AND concurso.id_proceso = proceso.id_proceso "+
                "AND concurso.id_sede = sede.id_sede");
        int x = 0;
        jComboBox1.removeAllItems();
        while (rs.next()) {
            int codigo = rs.getInt(1);
            String nombre = rs.getString(2);
            map.put(x++, codigo);
            jComboBox1.addItem(nombre);
        }
        rs.close();
    }

    public void buscar(String buscarPor) {
        condicion = "WHERE p.id_ubicacion=ub.id_ubicacion "+
                "AND p.id_escuela = es.id_escuela "+
                "AND p.id_concurso = "+map.get(jComboBox1.getSelectedIndex())+" ";
        table.setCondition(condicion+buscarPor);
        table.loadDataArray();
        labResultadosCount.setText(table.getRowCount()+"");
        table.revalidate();
        revalidate();
    }

    public String porNombresCompletos() {
        return "AND concat(ape_paterno,' ',ape_materno,' ',nombres) "+
                "LIKE concat('%','"+jTextField1.getText().trim()+"','%'); ";
    }

    public String porCodigo() {
        return "AND p.codi_postulante = '"+jTextField1.getText().trim()+"' ";
    }

    public String porAulaAsignada() {
        return "AND ub.numero_aula = '"+jTextField1.getText().trim()+"' ";
    }

    public String porNombreEscuela() {
        return "AND es.nombre LIKE '%"+jTextField1.getText().trim()+"%'";
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbBuscarPor = new JComboBox(BuscarPor.values());
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        labResultadosCount = new javax.swing.JLabel();

        jLabel1.setText("Buscar por:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Criterio:");

        jLabel3.setText("Concurso:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("resultados");

        labResultadosCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbBuscarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 606, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                                .addComponent(labResultadosCount, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBuscarPor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(labResultadosCount, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        BuscarPor a = (BuscarPor) cmbBuscarPor.getSelectedItem();
        switch (a) {
            case APELLIDOS_Y_NOMBRES:
                buscar(porNombresCompletos());
                break;
            case AULA_ASIGNADA:
                buscar(porAulaAsignada());
                break;
            case CODIGO:
                buscar(porCodigo());
                break;
            case NOMBRE_ESCUELA_A_LA_QUE_POSTULA:
                buscar(porNombreEscuela());
                break;
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbBuscarPor;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel labResultadosCount;
    // End of variables declaration//GEN-END:variables

    public static void main(String[] args) throws SQLException {
        DB database = new DB();
        RCContainer.showPanel(new PanBusqueda(database));
//        database.closeDB();
    }
}
